{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","afMessaging","requestPermission","pipe","tokenChanges","subscribe","token","alert","error","selector","template","AppModule","initializeApp","firebase","register","enabled","production","declarations","imports","providers","bootstrap","environment","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","bootstrapModule","err","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\nimport { AngularFireMessaging } from '@angular/fire/messaging';\nimport { mergeMapTo } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  template: `\n  <button (click)=\"requestPermission()\">\n    Hello this is a chat app. You should let us send you notifications for this reason.\n  </button>\n  `\n})\nexport class AppComponent {\n  constructor(private afMessaging: AngularFireMessaging) { }\n  requestPermission() {\n    this.afMessaging.requestPermission\n      .pipe(mergeMapTo(this.afMessaging.tokenChanges))\n      .subscribe(\n        (token) => { alert('Permission granted! Save to the server!' + token); },\n        (error) => { alert(error); },  \n      );\n  }\n}","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n// import { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AngularFireMessagingModule } from '@angular/fire/messaging';\nimport { AngularFireDatabaseModule } from '@angular/fire/database';\nimport { AngularFireAuthModule } from '@angular/fire/auth';\nimport { AngularFireModule } from '@angular/fire';\n// import { MessagingService } from '../service/messaging.service';\nimport { environment } from '../environments/environment';\nimport { AsyncPipe } from '@angular/common';\nimport { ServiceWorkerModule } from '@angular/service-worker';\n@NgModule({\n   declarations: [AppComponent],\n   imports: [\n      // AppRoutingModule,\n      BrowserModule,\n      AngularFireDatabaseModule,\n      AngularFireAuthModule,\n      AngularFireMessagingModule,\n      AngularFireModule.initializeApp(environment.firebase),\n      ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),\n   ],\n   providers: [AsyncPipe],\n   bootstrap: [AppComponent]\n})\nexport class AppModule { }","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  firebase: {\n    apiKey: \"AIzaSyBgNHZVOvWt7SbpViblgyCNzYX2GfDzO0U\",\n    authDomain: \"my-notifications-5498e.firebaseapp.com\",\n    databaseURL: \"https://my-notifications-5498e.firebaseio.com\",\n    projectId: \"my-notifications-5498e\",\n    storageBucket: \"my-notifications-5498e.appspot.com\",\n    messagingSenderId: \"253961749955\",\n    appId: \"1:253961749955:web:5400e70e025ed81ad26976\",\n    measurementId: \"G-39FN97PFQX\"\n  }\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}